#!/usr/bin/env python3
# coding: utf-8

# #### Last update: Apr 9 2024
# #### It generates parameters for GROMACS' OPLS-AA library.

# beer-ware licence
# oanca.gabriel@gmail.com

# For download and updates, vizit or clone:
#     https://github.com/gabrieloanca/gmxtools.git  
#     git@github.com:gabrieloanca/gmxtools.git
# For suggestions, reporting buggs or for any assistance write to oanca.gabriel@gmail.com

import sys, getopt

def show_help():
    print('''
ffld2gmx.py [-h] [-n stem] [-f file.ffld] [-a file.ac] [-r yes]

ffld2gmx.py reads OPLS-AA MD parameter files generated with "ffld_server -version 14" and antechamber RESP charges \
and puts them in a format ready to be pasted inside ffnonbonded.itp, ffbonded.itp and atomtypes.atp \
files of OPLS-AA force field of GROMACS.

At least one of the options of ffld2gmx.py must be given, in which case the other parameter will use the \
stem name (or prefix) of the supplied option. 

ffld charges will be used if --resp option is set to 'no' or if no .ac file is present.

NOTE 1: Inside GROMACS topology, the improper torsions are given under the [dihedrals] directive.

NOTE 2: For a good behaviour, give to state B the same bonding types as for state 1 in ffnonbonding.itp file \
(2nd column), in order to preserve the connectivities between EVB and non-EVB atoms in state B.

NOTE 3: You will still have to handle manually the files atomtype.rtp, aminoacids.hdb and, eventually, \
specbond.dat and residuetypes.dat. The following link provides a good tutorial: \
https://distributedscience.wordpress.com/2019/11/10/tutorial-modelling-post-translational-modified-proteins-with-gromacs/
specbond.dat and residuetypes.dat files are located in /path/to/gromacs/share/gromacs/top/

Options:
 -h                           show this help end exit
 -n or --name  [stem name]    string used as a prefix for atom types
 -f or --ffld  [file.ffld]    the file containing the 'ffld_server -version 14' md parameters
 -a or --ac    [file.ac]      the file containing the RESP charges generated by antechamber
 -r or --resp  [yes/no]       wether to use RESP charges from the .ac files ('yes') or ffld_server charges ('no')
''')

# We need the AC charges only to generate the lists ready to be pasted in ffnonbonding.itp file
def get_args():
    arg_list = sys.argv[1:]
    options="hn:f:a:r:"
    long_options=["help","name=","ffld=","ac=","resp="]
    opts, args= getopt.getopt(arg_list, options, long_options)
    stem = ffld = ac = resp = ''
    
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            show_help()
        elif opt in ('-n', '--name'):
            stem = str(arg)
        elif opt in ('-f', '--ffld'):
            ffld = str(arg)
            if not stem:
                stem = ffld[:-5]
        elif opt in ('-a', '--ac'):
            ac = str(arg)
            if not stem:
                stem = ac[:-3]
        elif opt in ('-r', '--resp'):
            resp = str(arg).lower()
            if resp in ['y', 'n', 'yes', 'no']:
                pass
            else:
                print("--resp option can only be 'yes' or 'no'")
                print('For help type "ffld2gmx.py -h"')

                
    if not ffld:
        ffld = stem + '.ffld'
    if not ac:
        ac = stem + '.ac'
    if not resp:
        resp = 'yes'
    
    return ffld, ac, stem.lower(), resp

# give the Z numbers
def getZ(name):
    mass = { "H": (1, 1.00800),
             "C": (6, 12.01100),
             "N": (7, 14.00670),
             "O": (8, 15.99940),
             "S": (16, 32.06000),
             "F": (9, 18.99840),
             "P": (15, 30.974)}
    
    return mass[name[0]]
    
# gets parameters from the parameters file and converts the units
def getparms(ffld):
    vdw_temp = b_temp = a_temp = tor_temp = imp_temp = None
    
    with open(ffld) as f:
        data = f.read().strip().split("\n")

    i_vdw = i_b = i_a = i_tor = i_imp = len(data) + 1
    for i, line in enumerate(data):
        if "atom   type  vdw" in line:
            i_vdw = i + 2
        elif "Stretch" in line:
            i_b = i + 1
        elif "Bending" in line:
            i_a = i + 1
        elif "proper Torsion                     V1      V2      V3      V4" in line:
            i_tor = i + 1
        elif "improper Torsion" in line:
            i_imp = i + 1
    
    vdw_temp = data[i_vdw:i_b-4]
    b_temp = data[i_b:i_a-2]
    a_temp = data[i_a:i_tor-2]
    tor_temp = data[i_tor:i_imp-2]
    imp_temp = data[i_imp:]
    
    return vdw_temp, b_temp, a_temp, tor_temp, imp_temp

def getcharges(ac, charges):
    try:
        with open(ac) as f:
            data = f.read().strip().split("\n")

        for line in data:
            line = line.split()
            if line[0] == "ATOM":
                at = line[2]
                ch = line[-2]
                charges.append((at, ch))

    except:
        print(f'{ac} file was not found or it does not have the right format.')
        print('ffld_server charges will be used instead.')

    return charges

def vdwconv(vdw_temp, charges, stem):
    vdw = []
    atomtypes = []
    atomtypes.append(';  type             mass')
    vdw.append(';  name        bond_type    Z       mass       charge     ptype      sigma     epsilon')
    
    for i, line in enumerate(vdw_temp):
        line = line.split()
        name = stem + "_" + line[0]
        btype = stem + "_" + line[0]
        Z, mass = getZ(line[0])
        if charges:
            charge = float(charges[i][1])
        else:
            charge = float(line[4])
        ptype = 'A'
        sigma = float(line[5]) / 10
        epsilon = float(line[6]) * 4.184
        vdw.append(f'   {name:<10}  {btype:<10}  {Z:>2}   {mass:>8.5f}   {charge:>10.6f}         {ptype} {sigma:10.6f}  {epsilon:10.6f}')
        atomtypes.append(f'   {name:<10}   {mass:>8.5f}')
        
    vdw.append('')
    atomtypes.append('')
    return vdw, atomtypes

def bconv(b_temp, stem):
    bonds = []
    bonds.append(';  atom1       atom2      func          b0          kb')
    for line in b_temp:
        line = line.split()
        a1 = stem + '_' + line[0]
        a2 = stem + '_' + line[1]
        func = 1
        b0 = float(line[3]) / 10
        kb = float(line[2]) * 4.184 * 100 * 2
        bonds.append(f'   {a1:<10}  {a2:<10}   {func:>2}  {b0:>10.5f}  {kb:>10.1f}')
        
    bonds.append('')
    return bonds

def aconv(a_temp,stem):
    angles = []
    angles.append(';  atom1       atom2       atom3      func          phi          ka')
    for line in a_temp:
        line = line.split()
        a1 = stem + '_' + line[0]
        a2 = stem + '_' + line[1]
        a3 = stem + '_' + line[2]
        func = 1
        th0 = float(line[4])
        cth = float(line[3]) * 4.184 * 2
        angles.append(f'   {a1:<10}  {a2:<10}  {a3:<10}    {func}   {th0:>10.3f}  {cth:>10.3f}')
    
    angles.append('')
    return angles

def torconv(tor_temp,stem):
    torsions = []
    torsions.append(';  atom1       atom2       atom3       atom4       func          V1          V2          V3          V4          V5          V6')
    for i, line in enumerate(tor_temp):
        line = line.split()
        a1 = stem + '_' + line[0]
        a2 = stem + '_' + line[1]
        a3 = stem + '_' + line[2]
        a4 = stem + '_' + line[3]
        v1, v2, v3, v4 = float(line[4]), float(line[5]), float(line[6]), float(line[7])
        func = 3
        c0 = (v2 + 1/2 * (v1 + v3)) * 4.184
        c1 = (1/2 * (-v1 + 3 * v3)) * 4.184
        c2 = (-v2 + 4 * v4) * 4.184
        c3 = (-2 * v3) * 4.184
        c4 = (-4 * v4) * 4.184
        c5 = 0.0
        torsions.append(f'   {a1:<10}  {a2:<10}  {a3:<10}  {a4:<10}     {func}  {c0:>10.6f}  {c1:>10.6f}  {c2:>10.6f}  {c3:>10.6f}  {c4:>10.6f}  {c5:>10.6f}')
    
    torsions.append('')
    return torsions

def impconv(imp_temp,stem):
    impropers = []
    func = 2  # type 2 improper
    phi = 180.0 # degrees
    impropers.append(';  atom1       atom2       atom3       atom4       func       phi             k')
    for line in imp_temp:
        line = line.split()
        a1 = stem + '_' + line[0]
        a2 = stem + '_' + line[1]
        a3 = stem + '_' + line[2]
        a4 = stem + '_' + line[3]
        # 0.5 factor gives parameters as ffbonding.itp
        k = 0.5 * float(line[4]) * 4.184
        impropers.append(f'   {a1:<10}  {a2:<10}  {a3:<10}  {a4:<10}    {func:>2}    {phi:>6}    {k:>10.6f}')
        
    impropers.append('')
    return impropers

def write2file(pname, stem, param):
    name = stem + '_' + pname + '.opls'
    with open(name , "w") as f:
        for l in param:
            f.write(l + '\n')

if __name__ == "__main__":
    try:
        ffld, ac, stem, resp = get_args()
        vdw_temp, b_temp, a_temp, tor_temp, imp_temp = getparms(ffld)
    except:
        if (sys.argv[1:]) and (sys.argv[1:][0] in ('-h', '--help')):
            pass
        else:
            print('Usage: ffld2gmx.py [-n stem] [-f file.ffld] [-a file.ac]')
            print('For help type "ffld2gmx.py -h"')
        sys.exit()

    charges = []
    if ac and (resp in ['yes', 'y']):
        charges = getcharges(ac, charges)

    if vdw_temp:
        vdw, atomtypes = vdwconv(vdw_temp,charges,stem)
        write2file('vdw', stem, vdw)
        write2file('atomtypes', stem, atomtypes)
    else:
        print('No vdW parameters found')

    if b_temp:
        bonds = bconv(b_temp,stem)
        write2file('bonds', stem, bonds)
    else:
        print('No bond found')

    if a_temp:
        angles = aconv(a_temp,stem)
        write2file('angles', stem, angles)
    else:
        print('No angle found') 

    if tor_temp:
        torsions = torconv(tor_temp,stem)
        write2file('torsions', stem, torsions)
    else:
        print('No torsions found')

    if imp_temp:
        impropers = impconv(imp_temp, stem)
        write2file('impropers', stem, impropers)
    else:
        print('No impropers found')
